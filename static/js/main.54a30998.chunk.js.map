{"version":3,"sources":["components/PartyHunt.js","utility/stringParser.js","components/PartyLoot.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["PartyHunt","useState","level","setLevel","Results","setResults","PartyHuntContainer","className","action","onSubmit","e","preventDefault","low","Math","floor","Number","high","round","htmlFor","type","id","value","onChange","target","Button","variant","styled","div","trimSpaces","string","split","newString","i","length","charCodeAt","push","parseFloat","join","PartyLoot","React","activeStep","setActiveStep","steps","state","setstate","Data","setData","handleSumbit","rawData","stringifyPaste","partySize","partyHuntObjects","playerIdx","playerObject","name","loot","supplies","balance","damage","healing","sort","a","b","totalLoot","totalSupplies","profit","forEach","el","lootType","players","parseLootYML","PartyLootStyled","Stepper","map","label","index","Step","key","StepLabel","Typography","step","data","TextareaAutosize","rows","cols","placeholder","aria-label","message","getStepContent","color","onClick","prevActiveStep","style","toLocaleString","player","idx","PlayerElement","Card","Header","Body","Text","Footer","payOut","disabled","AppBar","NavBar","to","activeStyle","opacity","nav","AppMain","main","footer","App","timeStamp","Date","component","path","exact","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54a30998.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Button from 'react-bootstrap/Button';\n\nexport default function PartyHunt() {\n\tconst [level, setLevel] = useState(null);\n\tconst [Results, setResults] = useState(null);\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tconst low = Math.floor(level * (2 / 3));\n\t\tif (Number(level)) {\n\t\t\tlet high = level;\n\t\t\twhile (Math.round(high * (2 / 3)) !== Number(level)) {\n\t\t\t\thigh++;\n\t\t\t}\n\t\t\tsetResults(() => ({\n\t\t\t\tlow,\n\t\t\t\thigh\n\t\t\t}));\n\t\t}\n\t};\n\treturn (\n\t\t<PartyHuntContainer>\n\t\t\t<h1 className='page-title'>Sharing Range Calculator </h1>\n\t\t\t<p className='subheading'>\n\t\t\t\tA party can share whenever the lowest leveled character is atleast 2/3\n\t\t\t\tthe level of the highest player.\n\t\t\t</p>\n\t\t\t<form action='' onSubmit={handleSubmit}>\n\t\t\t\t<label htmlFor='level'>Level: </label>\n\t\t\t\t<input\n\t\t\t\t\ttype='number'\n\t\t\t\t\tid='level'\n\t\t\t\t\tvalue={level}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tsetLevel(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Button variant='outline-success' type='submit'>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</form>\n\t\t\t{Results && (\n\t\t\t\t<p>\n\t\t\t\t\tThe low is {Results.low} and the high is {Results.high}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</PartyHuntContainer>\n\t);\n}\n\nconst PartyHuntContainer = styled.div`\n\tdisplay: flex;\n\tmargin: auto;\n\talign-items: flex-start;\n\theight: 100%;\n\tflex-direction: column;\n\tform {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tbutton {\n\t\t\twidth: ;\n\t\t}\n\t}\n`;\n","export function parseLootYML(string) {\n\tconst stringifyPaste = string.split(`\\n`);\n\tconst partySize = Math.floor((stringifyPaste.length - 1) / 6);\n\tlet partyHuntObjects = [];\n\tlet playerIdx = 6;\n\tfor (let i = 0; i < partySize; i++) {\n\t\tconst playerObject = {\n\t\t\tname: stringifyPaste[playerIdx],\n\t\t\tloot: trimSpaces(stringifyPaste[playerIdx + 1]),\n\t\t\tsupplies: trimSpaces(stringifyPaste[playerIdx + 2]),\n\t\t\tbalance: trimSpaces(stringifyPaste[playerIdx + 3]),\n\t\t\tdamage: trimSpaces(stringifyPaste[playerIdx + 4]),\n\t\t\thealing: trimSpaces(stringifyPaste[playerIdx + 5])\n\t\t};\n\t\tplayerIdx = playerIdx + 6;\n\t\tpartyHuntObjects.push(playerObject);\n\t}\n\tpartyHuntObjects = partyHuntObjects.sort((a, b) => {\n\t\treturn a['loot'] > b['loot'] ? -1 : 1;\n\t});\n\tconst payoutObject = {};\n\n\tlet totalLoot = trimSpaces(stringifyPaste[3]);\n\tlet totalSupplies = trimSpaces(stringifyPaste[4]);\n\n\tconst profit = (totalLoot - totalSupplies) / 4;\n\tpartyHuntObjects.forEach(el => {\n\t\tel['profit'] = profit;\n\t\tel['payOut'] = el.supplies + profit;\n\t});\n\tconst rawData = {\n\t\tlootType: stringifyPaste[playerIdx - 5],\n\t\tloot: totalLoot,\n\t\tprofit,\n\t\tplayers: partyHuntObjects,\n\t\tsupplies: totalSupplies\n\t};\n\treturn rawData;\n}\n\nfunction trimSpaces(string) {\n\tstring = string.split(':');\n\tlet newString = [];\n\tfor (let i = 0; i < string[1].length; i++) {\n\t\tif (\n\t\t\t(string[1].charCodeAt(i) < 58 && string[1].charCodeAt(i) > 47) ||\n\t\t\tstring[1].charCodeAt(i) === 45\n\t\t) {\n\t\t\tnewString.push(string[1][i]);\n\t\t}\n\t}\n\treturn Number.parseFloat(newString.join(''));\n}\n","import React, { useState } from 'react';\nimport { parseLootYML } from '../utility/stringParser';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport {\n\tTextareaAutosize,\n\tStepper,\n\tStep,\n\tStepLabel,\n\tTypography\n} from '@material-ui/core';\nimport styled from 'styled-components';\n\nexport default function PartyLoot() {\n\tfunction getStepContent(step, data) {\n\t\tswitch (step) {\n\t\t\tcase 0:\n\t\t\t\treturn (\n\t\t\t\t\t<TextareaAutosize\n\t\t\t\t\t\tname=''\n\t\t\t\t\t\trows={10}\n\t\t\t\t\t\tcols={10}\n\t\t\t\t\t\tid='data'\n\t\t\t\t\t\tplaceholder='Party hunt analyzer data.'\n\t\t\t\t\t\taria-label='party hunt analyzer data'\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tsetstate(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 1:\n\t\t\t\treturn { message: 'Results for all of your hunt.', ...data };\n\t\t\tdefault:\n\t\t\t\treturn 'Unknown step';\n\t\t}\n\t}\n\n\tconst [activeStep, setActiveStep] = React.useState(0);\n\tconst steps = getSteps();\n\n\tconst handleNext = () => {\n\t\tsetActiveStep(prevActiveStep => prevActiveStep + 1);\n\t};\n\n\tconst handleBack = () => {\n\t\tsetActiveStep(prevActiveStep => prevActiveStep - 1);\n\t};\n\n\tconst handleReset = () => {\n\t\tsetActiveStep(0);\n\t};\n\tconst [state, setstate] = useState('');\n\tconst [Data, setData] = useState(null);\n\tconst handleSumbit = e => {\n\t\tif (state) {\n\t\t\tconst rawData = parseLootYML(state);\n\t\t\tif (rawData) {\n\t\t\t\tsetData(rawData);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<PartyLootStyled {...Data}>\n\t\t\t<Stepper activeStep={activeStep}>\n\t\t\t\t{steps.map((label, index) => (\n\t\t\t\t\t<Step key={label}>\n\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\n\t\t\t\t\t</Step>\n\t\t\t\t))}\n\t\t\t</Stepper>\n\t\t\t{activeStep === 0 ? (\n\t\t\t\t<div>\n\t\t\t\t\t<Typography>{getStepContent(0)}</Typography>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\thandleSumbit();\n\t\t\t\t\t\t\t\thandleNext();\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\tData && (\n\t\t\t\t\t<div id='results'>\n\t\t\t\t\t\t<div className='resultsHeader'>\n\t\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t\tEach player has a\n\t\t\t\t\t\t\t\t{Data.profit > 0 ? ' net profit of ' : ' net loss of '}\n\t\t\t\t\t\t\t\t<span style={{ color: Data.profit > 0 ? 'green' : 'red' }}>\n\t\t\t\t\t\t\t\t\t{Math.floor(Data.profit).toLocaleString()} GP\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t<p className='resultsLoot'>\n\t\t\t\t\t\t\t\tTotal Loot: {Math.floor(Data.loot).toLocaleString()} GP\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p className='resultsLoot'>\n\t\t\t\t\t\t\t\tTotal Suplies: {Math.floor(Data.supplies).toLocaleString()} GP\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t{/* <p>Loot type: {Data.lootType}</p> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='resultsBody'>\n\t\t\t\t\t\t\t{Data.players.map((player, idx) => (\n\t\t\t\t\t\t\t\t<PlayerElement key={idx} {...player}>\n\t\t\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t\t\t<Card.Header>{player.name}</Card.Header>\n\t\t\t\t\t\t\t\t\t\t<Card.Body className='p-1'>\n\t\t\t\t\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t\t\t\t\t<span className='resultsBalance'>\n\t\t\t\t\t\t\t\t\t\t\t\t\tBalance:{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Math.floor(player.balance).toLocaleString()} GP\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t<span className='resultsProfit'>\n\t\t\t\t\t\t\t\t\t\t\t\t\tProfit:{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Math.floor(Data.profit).toLocaleString()} GP\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t<Card.Footer>\n\t\t\t\t\t\t\t\t\t\t\t<p className='resultsPayout'>\n\t\t\t\t\t\t\t\t\t\t\t\tPayment:\n\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{Math.floor(player.payOut).toLocaleString()} GP\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t</Card.Footer>\n\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t</PlayerElement>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tdisabled={activeStep === 0}\n\t\t\t\t\t\t\tvariant='danger'\n\t\t\t\t\t\t\tonClick={handleReset}>\n\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t)}\n\t\t</PartyLootStyled>\n\t);\n}\n\nconst PartyLootStyled = styled.div`\n\twidth: 100%;\n\toverflow: none;\n\t#data {\n\t\tresize: none;\n\t\twidth: 90vw;\n\t\theight: 80vh;\n\t\tmax-width: 300px;\n\t\tmax-height: 550px;\n\t}\n\t.resultsHeader {\n\t\twidth: 100%;\n\t}\n\t.resultsBody {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tjustify-content: space-evenly;\n\t}\n\t#results {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tbutton {\n\t\t\talign-self: flex-end;\n\t\t}\n\t}\n`;\n\nconst PlayerElement = styled.div`\n\twidth: 15rem;\n\tmargin: 1em 5px;\n\tfont-size: 1rem;\n\tp {\n\t\tmargin: 0;\n\t}\n\t.resultsPayout {\n\t\tspan {\n\t\t\tcolor: ${({ payOut }) => (payOut > 0 ? 'green' : 'red')};\n\t\t}\n\t}\n\t.resultsProfit {\n\t\tspan {\n\t\t\tcolor: ${({ profit }) => (profit > 0 ? 'green' : 'red')};\n\t\t}\n\t}\n\t.resultsBalance {\n\t\tspan {\n\t\t\tcolor: ${({ balance }) => (balance > 0 ? 'green' : 'red')};\n\t\t}\n\t}\n`;\n\nfunction getSteps() {\n\treturn ['Data', 'Results'];\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport default function AppBar() {\n\treturn (\n\t\t<NavBar>\n\t\t\t<div id='logo'>\n\t\t\t\t<NavLink to='/'>PartyCalculators</NavLink>\n\t\t\t</div>\n\t\t\t<div className='nav-link-container'>\n\t\t\t\t<NavLink to='/partyhunt' activeStyle={{ opacity: 0.7 }}>\n\t\t\t\t\tSharing Range\n\t\t\t\t</NavLink>\n\t\t\t\t<NavLink to='/partyloot' activeStyle={{ opacity: 0.7 }}>\n\t\t\t\t\tLoot Analyzer\n\t\t\t\t</NavLink>\n\t\t\t</div>\n\t\t</NavBar>\n\t);\n}\n\nconst NavBar = styled.nav`\n\tdisplay: flex;\n\tjustify-content: space-evenly;\n\theight: 30px;\n\tmargin: 0 auto;\n\twidth: 100vw;\n\talign-items: flex-end;\n\tpadding: 0.5em;\n\tbackground-color: black;\n\t.nav-link-container {\n\t\twidth: 50%;\n\t\tdisplay: flex;\n\t\tjustify-content: space-evenly;\n\t}\n\ta {\n\t\tcolor: white;\n\t\tfont-size: 1.2em;\n\t\tfont-weight: 300;\n\t\ttext-decoration: none;\n\t}\n`;\n","import React from 'react';\nimport PartyHunt from './components/PartyHunt';\nimport PartyLoot from './components/PartyLoot';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport styled from 'styled-components';\nimport AppBar from './components/AppBar';\nimport Home from './components/Home';\nfunction App() {\n\tconst timeStamp = new Date();\n\treturn (\n\t\t<>\n\t\t\t<Router>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<header className='App-header'>\n\t\t\t\t\t\t<AppBar />\n\t\t\t\t\t</header>\n\t\t\t\t\t<AppMain>\n\t\t\t\t\t\t<Route component={PartyHunt} path='/partyhunt' exact />\n\t\t\t\t\t\t<Route component={PartyLoot} path='/partyloot' exact />\n\t\t\t\t\t\t<Route component={PartyHunt} path='/' exact />\n\t\t\t\t\t</AppMain>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t\t<Footer>\n\t\t\t\t<p>Copyright © {timeStamp.getFullYear()} All Rights Reserved.</p>\n\t\t\t\t<p>\n\t\t\t\t\tOur statistics are based on tibia.com, the only official Tibia\n\t\t\t\t\twebsite. Tibia is a registered trademark of CipSoft GmbH. Tibia and\n\t\t\t\t\tall products related to Tibia are copyright by CipSoft GmbH.\n\t\t\t\t</p>\n\t\t\t</Footer>\n\t\t</>\n\t);\n}\n\nconst AppMain = styled.main`\n\twidth: 90vw;\n\tmargin: auto;\n\tmax-width: 680px;\n\theight: 90vh;\n`;\nconst Footer = styled.footer`\n\twidth: 100vw;\n\theight: 10vh;\n\tbackground-color: black;\n\tcolor: white;\n\ttext-align: center;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n`;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}